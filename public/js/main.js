// Generated by CoffeeScript 1.4.0
(function() {
  var Background, Bomb, Entity, Game, Helicopter, Target, Targets, canvas, game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function() {

    Game.prototype.keys = {
      32: 'space',
      37: 'left',
      38: 'up',
      39: 'right',
      40: 'down'
    };

    function Game(canvas) {
      var _this = this;
      this.context = canvas.getContext("2d");
      this.width = canvas.width;
      this.height = canvas.height;
      this.keyPressed = {};
      $(canvas).on('keydown', function(e) {
        var keyName;
        keyName = _this.keys[e.which];
        if (keyName) {
          _this.keyPressed[keyName] = e.type === 'keydown';
          return e.preventDefault();
        }
      });
    }

    Game.prototype.start = function() {
      var fps, interval,
        _this = this;
      fps = 60;
      interval = 1000 / fps;
      return setInterval(function() {
        _this.update();
        return _this.draw();
      }, interval);
    };

    Game.prototype.update = function() {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.update());
      }
      return _results;
    };

    Game.prototype.draw = function() {
      var entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.draw(this.context));
      }
      return _results;
    };

    return Game;

  })();

  Entity = (function() {

    function Entity() {
      this.x = 0;
      this.y = 0;
      this.width = 0;
      this.height = 0;
      this.xVelocity = 0;
      this.yVelocity = 0;
    }

    Entity.prototype.update = function() {
      this.x += this.xVelocity;
      return this.y += this.yVelocity;
    };

    Entity.prototype.draw = function(context) {
      context.fillStyle = this.color;
      return context.fillRect(this.x, this.y, this.width, this.height);
    };

    Entity.prototype.intersect = function(other) {
      return this.y + this.height > other.y && this.y < other.y + other.height && this.x + this.width > other.x && this.x < other.x + other.width;
    };

    return Entity;

  })();

  Background = (function(_super) {

    __extends(Background, _super);

    function Background() {
      Background.__super__.constructor.apply(this, arguments);
      this.color = "#fff";
      this.width = game.width;
      this.height = game.height;
    }

    return Background;

  })(Entity);

  Helicopter = (function(_super) {

    __extends(Helicopter, _super);

    function Helicopter() {
      Helicopter.__super__.constructor.apply(this, arguments);
      this.width = 40;
      this.height = 40;
      this.x = -this.width;
      this.y = 10;
      this.xVelocity = 3;
      this.yVelocity = 0;
    }

    Helicopter.prototype.update = function() {
      Helicopter.__super__.update.apply(this, arguments);
      if (this.x > game.width) {
        this.x = -this.width;
        this.y += this.height;
        return this.xVelocity *= 1.1;
      }
    };

    Helicopter.prototype.draw = function(context) {
      var explosion, helicopter;
      if (game.targets.intersect(this)) {
        explosion = document.getElementById("explosion");
        context.drawImage(explosion, this.x, this.y, this.width, this.height);
        return this.yVelocity = 5;
      } else {
        helicopter = document.getElementById("helicopter");
        return context.drawImage(helicopter, this.x, this.y, this.width, this.height);
      }
    };

    return Helicopter;

  })(Entity);

  Target = (function(_super) {

    __extends(Target, _super);

    function Target(x, y) {
      Target.__super__.constructor.apply(this, arguments);
      this.x = x;
      this.y = y;
      this.width = 100;
      this.height = 150;
      this.explosion = false;
      this.exploded = false;
      this.show = true;
    }

    Target.prototype.draw = function(context) {
      var img;
      if (this.explosion && !this.exploded) {
        img = document.getElementById("explosion");
        context.drawImage(img, this.x, this.y, this.width, this.height);
        this.show = false;
        this.explosion = false;
        return this.exploded = true;
      } else if (this.show) {
        img = document.getElementById("target");
        return context.drawImage(img, this.x, this.y, this.width, this.height);
      }
    };

    Target.prototype.update = function() {
      if (this.intersect(game.bomb)) {
        return this.explosion = true;
      }
    };

    return Target;

  })(Entity);

  Targets = (function(_super) {

    __extends(Targets, _super);

    function Targets() {
      var count, i, _i;
      this.targets = [];
      this.width = 100;
      this.height = 150;
      this.x = 0;
      this.y = game.height - this.height;
      count = Math.floor(game.width / this.width);
      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
        this.targets.push(new Target(this.x, this.y));
        this.x += this.width + 5;
      }
    }

    Targets.prototype.draw = function(context) {
      var target, _i, _len, _ref, _results;
      _ref = this.targets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        _results.push(target.draw(context));
      }
      return _results;
    };

    Targets.prototype.update = function() {
      var target, _i, _len, _ref, _results;
      _ref = this.targets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        _results.push(target.update());
      }
      return _results;
    };

    Targets.prototype.intersect = function(other) {
      var target, _i, _len, _ref;
      _ref = this.targets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        if (target.exploded) {
          continue;
        }
        if (other.intersect(target)) {
          return true;
        }
      }
      return false;
    };

    return Targets;

  })(Entity);

  Bomb = (function(_super) {

    __extends(Bomb, _super);

    function Bomb() {
      Bomb.__super__.constructor.apply(this, arguments);
      this.x = game.helicopter.x;
      this.y = game.helicopter.y + game.helicopter.height;
      this.xVelocity = game.helicopter.xVelocity;
    }

    Bomb.prototype.update = function() {
      Bomb.__super__.update.apply(this, arguments);
      if (game.keyPressed.down) {
        this.x = game.helicopter.x + game.helicopter.width - 1;
        this.y = game.helicopter.y + game.helicopter.height;
        this.width = 20;
        this.height = 20;
        this.yVelocity = 3;
        this.xVelocity = 0;
        return game.keyPressed.down = false;
      }
    };

    Bomb.prototype.draw = function(context) {
      var img;
      img = document.getElementById("bomb");
      return context.drawImage(img, this.x, this.y, this.width, this.height);
    };

    return Bomb;

  })(Entity);

  canvas = $('canvas')[0];

  game = new Game(canvas);

  game.entities = [game.background = new Background(), game.targets = new Targets(), game.helicopter = new Helicopter(), game.bomb = new Bomb()];

  game.start();

  canvas.focus();

}).call(this);
